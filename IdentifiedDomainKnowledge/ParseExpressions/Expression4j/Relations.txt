TP:  [real] implied---> [set properties]
TP:  [operator plus complex complex] IsA--> [complex]
TP:  [parameters expression element] parse---> [element]
TP:  [acos] function---> [get catalog]
TP:  [cos function] IsA--> [function]
TP:  [subjects] HasProperty---> [properties]
TP:  [operator] multiply---> [real real verify unary operator]
TP:  [integer expression element] parse---> [element]
FP:  [catalog] implied---> [add expression]
TP:  [optimizeding expression] IsA--> [expression]
TP:  [check expression element] IsA--> [element]
TP:  [real] implied---> [set real value]
TP:  [operator] multiply---> [verify unary]
TP:  [sin function] HasProperty---> [parameters]
TP:  [constant or variable expression element] IsA--> [element]
TP:  [string element] HasProperty---> [operator]
TP:  [binary operator expression element] IsA--> [element]
FP:  [operator name] IsA--> [name]
FP:  [operator plus] HasProperty---> [name]
FP:  [log function] HasProperty---> [name]
TP:  [expression element] IsA--> [element]
FP:  [real expression element] HasProperty---> [name]
FP:  [expression function] HasProperty---> [catalog]
FP:  [tan function] HasProperty---> [name]
TP:  [operator] multiply---> [real real get left operande type]
TP:  [parameters] def---> [expression element get operator]
FP:  [unary operator expression element] HasProperty---> [name]
TP:  [function name expression element] IsA--> [element]
TP:  [complex or real expression element] IsA--> [element]
FP:  [cos function] HasProperty---> [catalog]
TP:  [ceil function] HasProperty---> [parameters]
TP:  [acos] function---> []
TP:  [real expression element] IsA--> [element]
TP:  [factoriel] evaluate---> [object]
FP:  [operator minus] HasProperty---> [name]
TP:  [log function] HasProperty---> [parameters]
FP:  [catalog] implied---> [list expression]
TP:  [tan function] IsA--> [function]
TP:  [asin function] HasProperty---> [parameters]
FP:  [ceil function] HasProperty---> [catalog]
FP:  [complex or real expression element] HasProperty---> [name]
TP:  [subjects] list---> [constant]
FP:  [cosh function] HasProperty---> [catalog]
TP:  [random function] HasProperty---> [parameters]
TP:  [expression] implied---> [get expression model]
TP:  [factoriel] HasProperty---> [name]
TP:  [custom operator] IsA--> [operator]
TP:  [expression util] compute---> [element]
TP:  [tan function] HasProperty---> [parameters]
TP:  [floor function] IsA--> [function]
FP:  [bench] HasProperty---> [main]
FP:  [subjects] HasProperty---> [name]
TP:  [operator divide] HasProperty---> [symbol]
TP:  [tree element] HasProperty---> [value]
TP:  [operator] multiply---> [real complex compute object]
TP:  [variable expression element] IsA--> [element]
TP:  [subjects] add---> [parameters]
TP:  [factoriel] HasProperty---> [fact]
TP:  [generic operator] HasProperty---> [symbol]
TP:  [local expression model] IsA--> [model]
TP:  [subjects list expression] IsA--> [expression]
FP:  [operator unary minus] HasProperty---> [name]
TP:  [ceil function] IsA--> [function]
FP:  [floor function] HasProperty---> [name]
FP:  [catalog] implied---> [add constant]
TP:  [expression] implied---> [get expression implied]
TP:  [def expression element] IsA--> [element]
TP:  [parameters] implied---> [get parameters]
TP:  [atan function] HasProperty---> [parameters]
TP:  [sqrt function] IsA--> [function]
TP:  [parenthesis expression element] parse---> [element]
FP:  [operator unary plus] HasProperty---> [name]
TP:  [factoriel] HasProperty---> [catalog]
TP:  [function def expression element] parse---> [element]
TP:  [my first complex] agregated---> [expression]
TP:  [expression] implied---> [get catalog]
TP:  [boolean mathematical element] HasProperty---> [value]
TP:  [atan function] IsA--> [function]
TP:  [acos] function---> [get name]
TP:  [expression] implied---> [get function parameters to string]
TP:  [cosh function] IsA--> [function]
TP:  [operator] multiply---> [complex complex get operator name]
TP:  [subjects] HasProperty---> [operator]
TP:  [operator minus complex complex] IsA--> [complex]
FP:  [asin function] HasProperty---> [name]
FP:  [factoriel] HasProperty---> [catalog]
TP:  [operator] multiply---> [real complex get operator name]
TP:  [subjects] add---> [expression]
FP:  [expression element name] IsA--> [name]
TP:  [operator divide complex complex] IsA--> [complex]
TP:  [expression] implied---> [get name]
TP:  [operator minus] HasProperty---> [symbol]
TP:  [complex or real expression element] parse---> [element]
FP:  [expression expression element] HasProperty---> [name]
FP:  [floor function] HasProperty---> [catalog]
TP:  [real] implied---> [get value]
TP:  [expression] implied---> [evaluate object]
FP:  [constant or variable without check expression element] HasProperty---> [name]
TP:  [operator plus] HasProperty---> [symbol]
TP:  [real] implied---> [get complex value]
TP:  [operator] multiply---> [real real compute object]
TP:  [subjects] add---> [constant]
TP:  [parameters] implied---> [get parameters implied]
TP:  [util check position] IsA--> [position]
FP:  [atan function] HasProperty---> [name]
TP:  [complex] implied---> [set properties]
TP:  [log function] IsA--> [function]
TP:  [sin function] IsA--> [function]
TP:  [string expression element] IsA--> [element]
TP:  [operator] multiply---> [get symbol]
TP:  [signeding expression expression element] IsA--> [element]
TP:  [asin function] IsA--> [function]
FP:  [sinh function] HasProperty---> [name]
TP:  [operator unary plus] HasProperty---> [symbol]
TP:  [parameters] def---> [expression element evaluate object]
FP:  [sqrt function] HasProperty---> [catalog]
FP:  [catalog] implied---> [get name]
TP:  [string mathematical element] HasProperty---> [value]
TP:  [string element] HasProperty---> [value]
TP:  [signed integer expression element] IsA--> [element]
TP:  [operator] multiply---> [real real get operator name]
TP:  [operator divide] IsA--> [divide]
TP:  [factoriel] HasProperty---> [expression model]
TP:  [abs function] IsA--> [function]
TP:  [complex] implied---> [get complex implied]
TP:  [parameters] implied---> [add parameters]
TP:  [parameters] implied---> [add parameter]
TP:  [subjects] add---> [parameter]
TP:  [subjects] HasProperty---> [parameter]
FP:  [generic operator] HasProperty---> [name]
FP:  [string expression element] HasProperty---> [name]
TP:  [complex] implied---> [get type]
TP:  [subjects] HasProperty---> [parameters]
TP:  [subjects] HasProperty---> [constant]
TP:  [operator] multiply---> [real complex get right operande type]
TP:  [complex] implied---> [get complex value]
FP:  [function name expression element] HasProperty---> [name]
FP:  [sin function] HasProperty---> [name]
FP:  [local expression model] HasProperty---> [name]
TP:  [string mathematical element] HasProperty---> [properties]
FP:  [constant or variable expression element] HasProperty---> [name]
TP:  [floor function] HasProperty---> [parameters]
FP:  [catalog] implied---> [get expression]
FP:  [operator level] IsA--> [level]
FP:  [function def expression element] HasProperty---> [name]
FP:  [parameters expression element] HasProperty---> [name]
TP:  [boolean mathematical element] HasProperty---> [properties]
TP:  [abs] function---> [get catalog]
TP:  [cos function] HasProperty---> [parameters]
TP:  [binary operator expression element] parse---> [element]
TP:  [sinh function] IsA--> [function]
TP:  [unary operator expression element] IsA--> [element]
TP:  [expression element util check position] IsA--> [position]
TP:  [acos] function---> [get parameters]
FP:  [expression function] HasProperty---> [name]
TP:  [max expression element priority] IsA--> [priority]
TP:  [expression expression element] IsA--> [element]
TP:  [constant or variable expression element] parse---> [element]
TP:  [function expression element] IsA--> [element]
TP:  [signed expression expression element] IsA--> [element]
FP:  [parenthesis expression element] HasProperty---> [name]
TP:  [operator unary minus] HasProperty---> [symbol]
TP:  [function name expression element] parse---> [element]
TP:  [abs] function---> [get name]
TP:  [factoriel] HasProperty---> [parameters]
TP:  [root element] IsA--> [element]
TP:  [parameters] implied---> [get parameter]
TP:  [expression model] IsA--> [model]
FP:  [cosh function] HasProperty---> [name]
FP:  [bench] HasProperty---> [bench]
TP:  [expression] implied---> [get parameters]
FP:  [sin function] HasProperty---> [catalog]
FP:  [function name] IsA--> [name]
TP:  [subjects] parse---> [element]
TP:  [operator] multiply---> [complex complex get right operande type]
TP:  [abs] function---> [get parameters]
FP:  [asin function] HasProperty---> [catalog]
TP:  [operator] multiply---> [complex complex verify unary operator]
TP:  [expression expression element] parse---> [element]
FP:  [random function] HasProperty---> [catalog]
TP:  [cosh function] HasProperty---> [parameters]
TP:  [function def expression element] IsA--> [element]
TP:  [list expression] IsA--> [expression]
FP:  [factoriel] HasProperty---> [name]
FP:  [sinh function] HasProperty---> [catalog]
TP:  [operator] multiply---> [get operator multiply]
TP:  [sinh function] HasProperty---> [parameters]
TP:  [expression] implied---> [get main]
TP:  [real] implied---> [get real value]
TP:  [max operator priority] IsA--> [priority]
TP:  [constant or variable without check expression element] parse---> [element]
FP:  [factoriel] HasProperty---> [fact]
TP:  [subjects] HasProperty---> [symbol]
TP:  [operator] multiply---> [real complex verify unary operator]
TP:  [parameters] def---> [expression element parse element]
FP:  [operator divide] HasProperty---> [name]
TP:  [subjects] compute---> [value]
TP:  [expression util] HasProperty---> [element]
TP:  [real] implied---> [get real implied]
TP:  [string element] IsA--> [element]
TP:  [parameters def expression element] IsA--> [element]
FP:  [integer expression element] HasProperty---> [name]
TP:  [operator] multiply---> [real real get right operande type]
FP:  [tan function] HasProperty---> [catalog]
FP:  [random function] HasProperty---> [name]
FP:  [operator manager] IsA--> [manager]
TP:  [real expression element] parse---> [element]
TP:  [subjects] HasProperty---> [value]
TP:  [expression function] HasProperty---> [parameters]
TP:  [operator] multiply---> [get name]
TP:  [parenthesis expression element] IsA--> [element]
TP:  [parameters] def---> [expression element get parameters def expression element]
TP:  [tree element tree element] IsA--> [element]
TP:  [sqrt function] HasProperty---> [parameters]
TP:  [end position] IsA--> [position]
TP:  [operator] multiply---> [real complex get left operande type]
TP:  [expression function] IsA--> [function]
FP:  [sqrt function] HasProperty---> [name]
TP:  [function expression element] parse---> [element]
TP:  [integer expression element] IsA--> [element]
FP:  [catalog] implied---> [list constant]
TP:  [expression] implied---> [get root element]
TP:  [parameters expression element] IsA--> [element]
TP:  [local expression model] HasProperty---> [operator]
FP:  [ceil function] HasProperty---> [name]
FP:  [operator pow] HasProperty---> [name]
FP:  [atan function] HasProperty---> [catalog]
TP:  [my first user] define---> [function]
TP:  [expression] implied---> [parse object]
TP:  [tree element] IsA--> [element]
TP:  [subjects] HasProperty---> [expression]
TP:  [operator pow] HasProperty---> [symbol]
FP:  [log function] HasProperty---> [catalog]
TP:  [real] implied---> [get type]
FP:  [cos function] HasProperty---> [name]
TP:  [custom expression element] IsA--> [element]
FP:  [catalog] implied---> [catalog implied]
TP:  [unary operator expression element] parse---> [element]
TP:  [my first function expression] IsA--> [expression]
TP:  [signeding integer expression element] IsA--> [element]
TP:  [real] implied---> [get properties]
TP:  [list constant] IsA--> [constant]
TP:  [string expression element] parse---> [element]
FP:  [function expression element] HasProperty---> [name]
TP:  [operator] multiply---> [complex complex get left operande type]
FP:  [subjects] HasProperty---> [catalog]
TP:  [parameters expression element] HasProperty---> [operator]
TP:  [operator] multiply---> [complex complex compute object]
FP:  [catalog] implied---> [get constant]
TP:  [operator pow] IsA--> [pow]
TP:  [parameters] def---> [expression element get name]
FP:  [binary operator expression element] HasProperty---> [name]
