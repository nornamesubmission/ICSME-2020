FP:  [arg run] IsA--> [run]
TP:  [arc cosine] IsA--> [cosine]
FP:  [parser] HasProperty---> [array access]
TP:  [operator] HasProperty---> [get ge]
TP:  [complex] HasProperty---> [cos]
FP:  [jep] HasProperty---> [allow assignment]
FP:  [jj check n] add---> [two states]
TP:  [product] HasProperty---> [product]
TP:  [imaginary] HasProperty---> [imaginary]
FP:  [jjt parser state open node scope] IsA--> [scope]
TP:  [arc tangent] IsA--> [tangent]
FP:  [jep] add---> [function]
TP:  [complex] HasProperty---> [im]
FP:  [subset run] IsA--> [run]
FP:  [subjects] HasProperty---> [object]
FP:  [input component] HasProperty---> [tag]
FP:  [subset eq] run---> [object]
FP:  [trace object] IsA--> [object]
FP:  [union] HasProperty---> [union]
TP:  [operator] HasProperty---> [get multiply]
FP:  [power run] IsA--> [run]
TP:  [operator] HasProperty---> [symbol]
TP:  [differential] HasProperty---> [differential]
TP:  [num param] IsA--> [param]
TP:  [determinant] HasProperty---> [determinant]
FP:  [binary operator] HasProperty---> [left child]
TP:  [fun tab] IsA--> [tab]
TP:  [operator set] IsA--> [set]
FP:  [parser] HasProperty---> [initial token manager state]
TP:  [operator] HasProperty---> [get or]
TP:  [cur number] IsA--> [number]
TP:  [ele set] IsA--> [set]
FP:  [jjt parser state close] IsA--> [close]
TP:  [real number] HasProperty---> [number]
TP:  [cosine] HasProperty---> [cos]
TP:  [set operator] IsA--> [operator]
TP:  [subjects] HasProperty---> [zero]
FP:  [str run] IsA--> [run]
FP:  [expression compiler] compile---> [object]
FP:  [jj ntk] IsA--> [ntk]
TP:  [comparative] HasProperty---> [tolerance]
FP:  [java char stream] expand---> [buff]
FP:  [parser] HasProperty---> [argument list]
TP:  [int value] IsA--> [value]
TP:  [limits layout] IsA--> [layout]
TP:  [function] HasProperty---> [child]
TP:  [complex] HasProperty---> [log]
FP:  [ceil run] IsA--> [run]
FP:  [input component] HasProperty---> [group]
TP:  [list expression] IsA--> [expression]
TP:  [abs] HasProperty---> [abs]
TP:  [operator] HasProperty---> [get lt]
FP:  [open node scope] IsA--> [scope]
FP:  [parser] HasProperty---> [power expression]
FP:  [jjt] HasProperty---> [parent]
FP:  [arc sine h] run---> [object]
FP:  [math object] HasProperty---> [parent]
FP:  [parser] HasProperty---> [token]
FP:  [move nfa] IsA--> [nfa]
TP:  [logarithm] HasProperty---> [logarithm]
FP:  [parser] add---> [to error list]
FP:  [input component] HasProperty---> [tooltip]
FP:  [jjt] add---> [child]
FP:  [dot object] IsA--> [object]
TP:  [postfix math command check] IsA--> [check]
FP:  [jj check n] add---> [states]
FP:  [sine h run] IsA--> [run]
FP:  [complex pfmc run] IsA--> [run]
FP:  [jjt parser state] HasProperty---> [node created]
FP:  [parser] HasProperty---> [additive expression]
FP:  [array access] IsA--> [access]
FP:  [subjects] visit---> [object]
TP:  [operator] HasProperty---> [get power]
TP:  [end line] IsA--> [line]
FP:  [doc listener] IsA--> [listener]
TP:  [abs] run---> [object]
FP:  [jep] HasProperty---> [error info]
FP:  [jep] add---> [standard functions]
FP:  [operator set] HasProperty---> [cross]
FP:  [jep] remove---> [variable]
TP:  [subset] HasProperty---> [subset]
FP:  [java char stream] done---> [object]
TP:  [tangent] HasProperty---> [tangent]
FP:  [foc listener] HasProperty---> [focus lost]
FP:  [tree validate] IsA--> [validate]
TP:  [arc sine] HasProperty---> [asin]
TP:  [subjects] create---> [number]
FP:  [list run] IsA--> [run]
FP:  [complex] add---> [object]
TP:  [input component] IsA--> [component]
FP:  [product run] IsA--> [run]
TP:  [language manager] IsA--> [manager]
TP:  [jep] HasProperty---> [traverse]
TP:  [jep] remove---> [variable]
FP:  [sine h] run---> [object]
FP:  [clear node scope] IsA--> [scope]
TP:  [operator set] HasProperty---> [element]
TP:  [nary operator] HasProperty---> [size]
FP:  [floor run] IsA--> [run]
FP:  [postfix math command] IsA--> [command]
FP:  [output format] convert---> [object]
FP:  [java char stream] IsA--> [stream]
FP:  [parser] HasProperty---> [variable]
TP:  [java char stream] begin---> [token]
FP:  [doc listener] resize---> [object]
FP:  [command evaluator] IsA--> [evaluator]
TP:  [l value] IsA--> [value]
FP:  [jjt parser state clear node scope] IsA--> [scope]
TP:  [power] HasProperty---> [power]
FP:  [subjects] run---> [object]
FP:  [divide run] IsA--> [run]
TP:  [function] HasProperty---> [function]
TP:  [jep] remove---> [function]
TP:  [real] HasProperty---> [real]
FP:  [conjugate object] IsA--> [object]
FP:  [jep] has---> [error]
TP:  [jep] has---> [error]
FP:  [binomial] expand---> [object]
TP:  [set function] IsA--> [function]
TP:  [integral] HasProperty---> [integral]
TP:  [sine] HasProperty---> [sine]
TP:  [comparative] HasProperty---> [eq]
FP:  [if] evaluate---> [object]
FP:  [jjt parser state reset] IsA--> [reset]
FP:  [command evaluator] evaluate---> [object]
TP:  [operator] HasProperty---> [get operator set]
TP:  [matrix] HasProperty---> [m]
TP:  [complex] HasProperty---> [asin]
TP:  [logarithm] HasProperty---> [log]
FP:  [parser] HasProperty---> [expression]
TP:  [parser] assign---> [expression]
FP:  [java char stream] HasProperty---> [column]
TP:  [jep] add---> [function]
TP:  [ast fun node] HasProperty---> [operator]
FP:  [parser] enable---> [tracing]
FP:  [range run] IsA--> [run]
FP:  [parser] HasProperty---> [parser]
FP:  [square root run] IsA--> [run]
FP:  [natural logarithm run] IsA--> [run]
TP:  [operator] HasProperty---> [get assign]
TP:  [operator] HasProperty---> [name]
FP:  [arc tan h run] IsA--> [run]
TP:  [complex] equals---> [object]
FP:  [parser] HasProperty---> [function]
FP:  [binary operator] HasProperty---> [right child]
TP:  [component check selection] IsA--> [selection]
TP:  [operator] HasProperty---> [get ne]
TP:  [jep set var value] IsA--> [value]
TP:  [square root square root] IsA--> [root]
TP:  [ast constant] HasProperty---> [value]
TP:  [complex] add---> [object]
FP:  [sine run object] IsA--> [object]
FP:  [status bar] HasProperty---> [status bar]
TP:  [parser] HasProperty---> [token]
TP:  [floor] HasProperty---> [floor]
TP:  [command element] IsA--> [element]
TP:  [complex] HasProperty---> [object]
TP:  [comparative] HasProperty---> [ne]
TP:  [var value] IsA--> [value]
TP:  [nary function] HasProperty---> [size]
FP:  [jep] HasProperty---> [top node]
TP:  [operator] HasProperty---> [operator]
TP:  [intersection] HasProperty---> [intersection]
TP:  [display text] IsA--> [text]
FP:  [java char stream] HasProperty---> [backup]
TP:  [operator] HasProperty---> [get eq]
TP:  [operator] HasProperty---> [get subtract]
TP:  [jep set] IsA--> [set]
TP:  [sum] HasProperty---> [sum]
FP:  [tan h] run---> [object]
FP:  [jep] add---> [standard constants]
FP:  [jep] HasProperty---> [value]
FP:  [jjt] HasProperty---> [child]
TP:  [matrix] HasProperty---> [n]
TP:  [operator] HasProperty---> [get gt]
FP:  [output format] IsA--> [format]
TP:  [cosine h cosh] IsA--> [cosh]
FP:  [jep tree] IsA--> [tree]
TP:  [command check number] IsA--> [number]
FP:  [parser] HasProperty---> [real constant]
TP:  [function table] IsA--> [table]
FP:  [dot run] IsA--> [run]
FP:  [nary function] HasProperty---> [child]
TP:  [ast var node] HasProperty---> [name]
TP:  [binomial] HasProperty---> [binomial]
FP:  [jjt] accept---> []
FP:  [function] HasProperty---> [child]
TP:  [range] HasProperty---> [range]
TP:  [matrix] HasProperty---> [element]
FP: [jjt close] IsA--> [close]
TP:  [arc sine] IsA--> [sine]
FP:  [union run] IsA--> [run]
FP:  [arc tan h] run---> [object]
FP:  [subjects] HasProperty---> [one]
FP:  [input component] HasProperty---> [cursor]
TP:  [jj] consume---> [token]
FP:  [math object] IsA--> [object]
TP:  [java char stream] HasProperty---> [line]
FP:  [jep] HasProperty---> [var value]
FP:  [jjt parser state] IsA--> [state]
TP:  [java char stream] HasProperty---> [image]
FP:  [jep set] allow---> [assignment]
TP:  [complex] HasProperty---> [hash code]
FP:  [output format] read---> [format file]
TP:  [complex] HasProperty---> [complex]
TP:  [input component] HasProperty---> [image]
TP:  [jep] HasProperty---> [var]
TP:  [operator] HasProperty---> [pfmc]
TP:  [sym tab] IsA--> [tab]
FP:  [jep] HasProperty---> [implicit mul]
TP:  [matrix] HasProperty---> [array]
FP:  [jep] HasProperty---> [allow undeclared]
TP:  [ast fun node] verify---> [operator]
FP:  [initial token manager state] IsA--> [state]
FP:  [expression compiler visit object] IsA--> [object]
TP:  [jj] scan---> [token]
TP:  [variable] HasProperty---> [variable]
TP:  [math tran] IsA--> [tran]
FP:  [subjects] HasProperty---> [two]
TP:  [real] HasProperty---> [re]
TP:  [operator] HasProperty---> [get list]
FP:  [parser] restart---> [object]
FP:  [jjt] HasProperty---> [num children]
FP:  [jj] add---> [states]
FP:  [jjt parser state] HasProperty---> [root node]
FP:  [cosine h] run---> [object]
FP:  [arc sine] run---> [object]
TP:  [complex] HasProperty---> [abs]
TP:  [comparative] HasProperty---> [le]
FP:  [component reset] IsA--> [reset]
TP:  [cosine] HasProperty---> [cosine]
FP:  [jep] add---> [complex]
TP:  [ele] HasProperty---> [object]
FP:  [foc listener] IsA--> [listener]
FP:  [load language] IsA--> [language]
FP:  [math command] IsA--> [command]
FP:  [jep] HasProperty---> [symbol table]
FP:  [jep] add---> [variable]
TP:  [text] HasProperty---> [text]
TP:  [math object] HasProperty---> [name]
FP:  [component copy object] IsA--> [object]
FP:  [parser] HasProperty---> [l value]
FP:  [jjt parser state] HasProperty---> [node arity]
TP:  [jep] HasProperty---> [value]
FP:  [arc cosine h] run---> [object]
FP:  [intersection run] IsA--> [run]
FP:  [parser] assign---> [expression]
TP:  [operator] HasProperty---> [get u minus]
FP:  [parser] replace---> [escape]
FP:  [parser] HasProperty---> [identifier]
FP:  [jep] remove---> [function]
TP:  [range] HasProperty---> [gen range]
TP:  [complex] verify---> [na n]
TP:  [complex] HasProperty---> [sub]
FP:  [arc cosine h run] IsA--> [run]
FP:  [parser] HasProperty---> [or expression]
TP:  [modulus] HasProperty---> [modulus]
FP:  [jep] HasProperty---> [var]
FP:  [jep] HasProperty---> [complex value]
FP:  [arc sine h run] IsA--> [run]
FP:  [parser] HasProperty---> [next token]
TP:  [ast var node] HasProperty---> [var]
TP:  [operator] HasProperty---> [get le]
TP:  [ast fun node] HasProperty---> [name]
TP:  [complex] HasProperty---> [re]
TP:  [complex] HasProperty---> [sin]
TP:  [binomial] expand---> [object]
FP:  [foc listener] HasProperty---> [focus gained]
TP:  [operator] HasProperty---> [get not]
FP:  [nary operator] HasProperty---> [child]
FP:  [complex] HasProperty---> [hash code]
FP:  [cosine run object] IsA--> [object]
FP:  [complex] equals---> [object]
FP:  [subjects] evaluate---> [object]
TP:  [operator] HasProperty---> [get divide]
FP:  [jep] add---> [constant]
FP:  [binary operator set] left---> [child]
FP:  [logarithm run] IsA--> [run]
FP:  [abs] run---> [object]
FP:  [parser] continue---> [parse]
TP:  [complex] HasProperty---> [power]
TP:  [parser] HasProperty---> [variable]
FP:  [parser] HasProperty---> [re init]
TP:  [buff size] IsA--> [size]
TP:  [operator] HasProperty---> [get mod]
FP:  [jep] HasProperty---> [traverse]
TP:  [operator] HasProperty---> [get dot]
TP:  [variable] HasProperty---> [var name]
TP:  [symbol table] IsA--> [table]
TP:  [divide divide] IsA--> [divide]
TP:  [operator] HasProperty---> [get add]
FP:  [status bar] IsA--> [bar]
FP:  [parser] generate---> [parse exception]
TP:  [complex float value] IsA--> [value]
FP:  [ele] HasProperty---> [object]
TP:  [check number] IsA--> [number]
TP:  [comparative set tolerance] IsA--> [tolerance]
FP:  [ele run] IsA--> [run]
TP:  [operator] HasProperty---> [get operators]
FP:  [foc listener] HasProperty---> [add component]
TP:  [parser] HasProperty---> [function]
TP:  [gen range] IsA--> [range]
FP:  [copy finish] IsA--> [finish]
FP:  [doc listener] remove---> [update]
FP:  [parser state] IsA--> [state]
FP:  [expression compiler] IsA--> [compiler]
TP:  [comparative] HasProperty---> [comparative]
TP:  [sine] HasProperty---> [sin]
FP:  [doc listener] changed---> [update]
TP:  [component position] IsA--> [position]
FP:  [jep] HasProperty---> [operator set]
FP:  [arc tangent] run---> [object]
FP:  [format file] IsA--> [file]
FP:  [jjt parser state] reset---> [object]
FP:  [end column] IsA--> [column]
TP:  [command element] HasProperty---> [value]
FP:  [nary operator] add---> [child]
FP:  [not] run---> [object]
FP:  [postfix math command run] IsA--> [run]
FP:  [cosine h run] IsA--> [run]
TP:  [complex] HasProperty---> [tan]
FP:  [jep] evaluate---> [object]
TP:  [comparative] HasProperty---> [ge]
TP:  [complex] verify---> [infinite]
FP:  [complex] HasProperty---> [object]
FP:  [jep] HasProperty---> [parser]
TP:  [complex set] IsA--> [set]
TP:  [power expression] IsA--> [expression]
FP:  [jep] HasProperty---> [value as object]
FP:  [postfix math command] run---> [object]
TP:  [tangent] HasProperty---> [tan]
FP:  [exp run] IsA--> [run]
TP:  [parser] HasProperty---> [expression]
TP:  [round] HasProperty---> [round]
FP:  [arc cosine] run---> [object]
TP:  [jep] add---> [complex]
TP:  [matrix] HasProperty---> [matrix]
FP:  [parser] HasProperty---> [right expression]
TP:  [operator] HasProperty---> [get and]
TP:  [jep] add---> [variable]
FP:  [line column] IsA--> [column]
FP:  [command evaluator] HasProperty---> [command evaluator]
TP:  [node arity] IsA--> [arity]
FP:  [jep] HasProperty---> [function table]
TP:  [var name] IsA--> [name]
